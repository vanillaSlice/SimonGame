{"version":3,"sources":["scripts/index.js"],"names":["sequence","playerIndex","previousColour","speedInterval","errorTimeout","sounds","btnElements","green","document","querySelector","red","yellow","blue","screenElement","screenTextElement","startBtnElement","strictBtnElement","strictLightElement","powerBtnElement","colours","speedIntervals","errorTimeouts","screenFlashTimeout","screenFlashToggles","newGame","error","win","winningScore","isOn","strictMode","buttonsLocked","intervalIds","timeoutIds","initialiseSounds","audioContext","window","AudioContext","webkitAudioContext","Sound","frequency","wave","oscillator","createOscillator","setValueAtTime","type","start","gain","createGain","connect","destination","play","bind","stop","setTargetAtTime","currentTime","togglePower","checked","turnPowerOn","turnPowerOff","toggleScreenLight","on","classList","toggle","clearTimedEvents","setScreenText","turnOffStrictMode","lockButtons","stopSounds","clearIntervals","clearTimeouts","forEach","id","clearInterval","clearTimeout","text","innerText","remove","Object","values","btnElement","sound","startNewGame","toggles","timeout","makeScreenFlash","initNewSequence","playSequence","push","setTimeout","getRandomColour","Math","floor","random","length","index","getCountString","setInterval","playAndStopSequenceElement","onPlaySequenceComplete","colour","playSequenceElement","stopSequenceElement","add","unlockButtons","startErrorTimeout","flagError","playAndStopSound","continueAfterError","toggleStrictMode","buttonPressed","e","preventDefault","stopPropagation","target","dataset","buttonReleased","turnAllButtonsOff","flagWin","continueSequence","continueAfterWin","addEventListener"],"mappings":"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","file":"scripts.8e0d5a77.js","sourceRoot":"../src","sourcesContent":["/*\n * DOM Elements\n */\n\nconst btnElements = {\n  green: document.querySelector('.js-green-btn'),\n  red: document.querySelector('.js-red-btn'),\n  yellow: document.querySelector('.js-yellow-btn'),\n  blue: document.querySelector('.js-blue-btn'),\n};\nconst screenElement = document.querySelector('.js-screen');\nconst screenTextElement = document.querySelector('.js-screen-text');\nconst startBtnElement = document.querySelector('.js-start-btn');\nconst strictBtnElement = document.querySelector('.js-strict-btn');\nconst strictLightElement = document.querySelector('.js-strict-light');\nconst powerBtnElement = document.querySelector('.js-power-btn');\n\n/*\n * Constants\n */\n\nconst colours = ['green', 'red', 'yellow', 'blue'];\nconst speedIntervals = {\n  1: 1000,\n  5: 850,\n  9: 700,\n  13: 550,\n};\nconst errorTimeouts = {\n  1: 5000,\n  5: 4000,\n  9: 3000,\n  13: 2000,\n};\nconst screenFlashTimeout = 300;\nconst screenFlashToggles = {\n  newGame: 4,\n  error: 6,\n  win: 8,\n};\nconst winningScore = 20;\n\n/*\n * State\n */\n\nlet isOn = false;\nlet strictMode = false;\nlet buttonsLocked = true;\nlet sequence;\nlet playerIndex;\nlet previousColour;\nlet speedInterval;\nlet errorTimeout;\nlet intervalIds = [];\nlet timeoutIds = [];\n\n/*\n * Sounds\n */\n\nlet sounds;\n\nfunction initialiseSounds() {\n  if (sounds) {\n    return;\n  }\n\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n  sounds = {\n    green: new Sound({\n      audioContext,\n      frequency: 164.81,\n    }),\n    red: new Sound({\n      audioContext,\n      frequency: 220.00,\n    }),\n    yellow: new Sound({\n      audioContext,\n      frequency: 277.18,\n    }),\n    blue: new Sound({\n      audioContext,\n      frequency: 329.63,\n    }),\n    error: new Sound({\n      audioContext,\n      frequency: 110.00,\n      wave: 'triangle',\n    }),\n    win: new Sound({\n      audioContext,\n      frequency: 440.00,\n    }),\n  };\n}\n\nclass Sound {\n  constructor({ audioContext, frequency, wave = 'sine' }) {\n    this.audioContext = audioContext;\n\n    const oscillator = this.audioContext.createOscillator();\n    oscillator.frequency.setValueAtTime(frequency, 0);\n    oscillator.type = wave;\n    oscillator.start();\n\n    const gain = this.audioContext.createGain();\n    gain.gain.setValueAtTime(0, 0);\n    oscillator.connect(gain);\n    gain.connect(this.audioContext.destination);\n\n    this.gain = gain.gain;\n\n    this.play = this.play.bind(this);\n    this.stop = this.stop.bind(this);\n  }\n\n  play() {\n    this.gain.setTargetAtTime(1, this.audioContext.currentTime, 0.01);\n  }\n\n  stop() {\n    this.gain.setTargetAtTime(0, this.audioContext.currentTime, 0.01);\n  }\n}\n\n/*\n * Functions.\n */\n\nfunction togglePower() {\n  if (powerBtnElement.checked) {\n    turnPowerOn();\n  } else {\n    turnPowerOff();\n  }\n}\n\nfunction turnPowerOn() {\n  isOn = true;\n  initialiseSounds();\n  toggleScreenLight(true);\n}\n\nfunction toggleScreenLight(on) {\n  screenElement.classList.toggle('lit', on);\n}\n\nfunction turnPowerOff() {\n  isOn = false;\n  clearTimedEvents();\n  setScreenText('--');\n  toggleScreenLight(false);\n  turnOffStrictMode();\n  lockButtons();\n  stopSounds();\n}\n\nfunction clearTimedEvents() {\n  clearIntervals();\n  clearTimeouts();\n}\n\nfunction clearIntervals() {\n  intervalIds.forEach(id => clearInterval(id));\n  intervalIds = [];\n}\n\nfunction clearTimeouts() {\n  timeoutIds.forEach(id => clearTimeout(id));\n  timeoutIds = [];\n}\n\nfunction setScreenText(text) {\n  screenTextElement.innerText = text;\n}\n\nfunction turnOffStrictMode() {\n  strictMode = false;\n  strictLightElement.classList.remove('lit');\n}\n\nfunction lockButtons() {\n  buttonsLocked = true;\n  Object.values(btnElements).forEach(btnElement => btnElement.classList.remove('clickable', 'lit'));\n}\n\nfunction stopSounds() {\n  Object.values(sounds).forEach(sound => sound.stop());\n}\n\nfunction startNewGame() {\n  if (!isOn) {\n    return;\n  }\n\n  const toggles = screenFlashToggles.newGame;\n  const timeout = (toggles + 1) * screenFlashTimeout;\n  clearTimedEvents();\n  setScreenText('--');\n  toggleScreenLight(true);\n  lockButtons();\n  stopSounds();\n  makeScreenFlash(toggles);\n  initNewSequence();\n  playSequence(timeout);\n}\n\nfunction makeScreenFlash(toggles) {\n  timeoutIds.push(setTimeout(() => {\n    if (toggles > 0) {\n      toggleScreenLight();\n      makeScreenFlash(toggles - 1);\n    }\n  }, screenFlashTimeout));\n}\n\nfunction initNewSequence() {\n  sequence = [getRandomColour()];\n}\n\nfunction getRandomColour() {\n  return colours[Math.floor(Math.random() * colours.length)];\n}\n\nfunction playSequence(timeout) {\n  let index = 0;\n  playerIndex = 0;\n  speedInterval = speedIntervals[sequence.length] || speedInterval;\n  errorTimeout = errorTimeouts[sequence.length] || errorTimeout;\n  timeoutIds.push(setTimeout(() => {\n    setScreenText(getCountString());\n    intervalIds.push(setInterval(() => {\n      if (index < sequence.length) {\n        playAndStopSequenceElement(index);\n        index += 1;\n      } else {\n        onPlaySequenceComplete();\n      }\n    }, speedInterval));\n  }, timeout));\n}\n\nfunction getCountString() {\n  return sequence.length < 10 ? `0${sequence.length}` : sequence.length;\n}\n\nfunction playAndStopSequenceElement(index) {\n  const colour = sequence[index];\n  const btnElement = btnElements[colour];\n  const sound = sounds[colour];\n  const timeout = speedInterval / 2;\n  playSequenceElement(btnElement, sound);\n  stopSequenceElement(btnElement, sound, timeout);\n}\n\nfunction playSequenceElement(btnElement, sound) {\n  btnElement.classList.add('lit');\n  sound.play();\n}\n\nfunction stopSequenceElement(btnElement, sound, timeout) {\n  timeoutIds.push(setTimeout(() => {\n    btnElement.classList.remove('lit');\n    sound.stop();\n  }, timeout));\n}\n\nfunction onPlaySequenceComplete() {\n  clearTimedEvents();\n  unlockButtons();\n  startErrorTimeout();\n}\n\nfunction unlockButtons() {\n  buttonsLocked = false;\n  Object.values(btnElements).forEach(btnElement => btnElement.classList.add('clickable'));\n}\n\nfunction startErrorTimeout() {\n  timeoutIds.push(setTimeout(flagError, errorTimeout));\n}\n\nfunction flagError() {\n  const toggles = screenFlashToggles.error;\n  const timeout = screenFlashTimeout * (toggles + 1);\n  clearTimedEvents();\n  lockButtons();\n  stopSounds();\n  playAndStopSound(sounds.error, timeout);\n  setScreenText('!!');\n  makeScreenFlash(toggles);\n  continueAfterError(timeout);\n}\n\nfunction playAndStopSound(sound, timeout) {\n  sound.play();\n  timeoutIds.push(setTimeout(sound.stop, timeout));\n}\n\nfunction continueAfterError(timeout) {\n  timeoutIds.push(setTimeout(strictMode ? startNewGame : playSequence, timeout));\n}\n\nfunction toggleStrictMode() {\n  if (!isOn) {\n    return;\n  }\n\n  strictMode = !strictMode;\n  strictLightElement.classList.toggle('lit', strictMode);\n}\n\nfunction buttonPressed(e) {\n  e.preventDefault();\n  e.stopPropagation();\n\n  if (buttonsLocked || !isOn) {\n    previousColour = false;\n    return;\n  }\n\n  const btnElement = e.target;\n  const { colour } = btnElement.dataset;\n\n  btnElement.classList.add('lit');\n  sounds[colour].play();\n\n  if (colour !== sequence[playerIndex]) {\n    flagError();\n    return;\n  }\n\n  previousColour = colour;\n  clearTimedEvents();\n}\n\nfunction buttonReleased(e) {\n  e.preventDefault();\n  e.stopPropagation();\n\n  if (buttonsLocked || !isOn) {\n    return;\n  }\n\n  turnAllButtonsOff();\n  stopSounds();\n\n  if (!previousColour) {\n    return;\n  }\n\n  playerIndex += 1;\n\n  if (playerIndex === winningScore) {\n    flagWin();\n  } else if (playerIndex === sequence.length) {\n    continueSequence();\n  }\n\n  previousColour = false;\n}\n\nfunction turnAllButtonsOff() {\n  Object.values(btnElements).forEach(btnElement => btnElement.classList.remove('lit'));\n}\n\nfunction flagWin() {\n  const timeout = screenFlashTimeout * (screenFlashToggles.win + 1);\n  lockButtons();\n  playAndStopSound(sounds.win, timeout);\n  setScreenText('**');\n  makeScreenFlash(screenFlashToggles.win);\n  continueAfterWin(timeout);\n}\n\nfunction continueAfterWin(timeout) {\n  timeoutIds.push(setTimeout(startNewGame, timeout));\n}\n\nfunction continueSequence() {\n  playerIndex = 0;\n  sequence.push(getRandomColour());\n  lockButtons();\n  playSequence();\n}\n\n/*\n * Initialse\n */\n\npowerBtnElement.addEventListener('change', togglePower);\nstartBtnElement.addEventListener('click', startNewGame);\nstrictBtnElement.addEventListener('click', toggleStrictMode);\n\nObject.values(btnElements).forEach((btnElement) => {\n  btnElement.addEventListener('mousedown', buttonPressed);\n  btnElement.addEventListener('mouseup', buttonReleased);\n  btnElement.addEventListener('mouseleave', buttonReleased);\n  btnElement.addEventListener('dragleave', buttonReleased);\n  btnElement.addEventListener('touchstart', buttonPressed);\n  btnElement.addEventListener('touchend', buttonReleased);\n});\n"]}